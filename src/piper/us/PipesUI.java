package piper.us;
    import javax.swing.JOptionPane;
    import java.io.*;
/**
 *
 * @author up704055
 */
public class PipesUI extends javax.swing.JFrame {

    /**
     * Creates new form PipesUI
     */
    public PipesUI() {
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outerGroup = new javax.swing.ButtonGroup();
        innerGroup = new javax.swing.ButtonGroup();
        chemGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lenField = new javax.swing.JTextField();
        diamField = new javax.swing.JTextField();
        lengthLabel = new javax.swing.JLabel();
        diamLabel = new javax.swing.JLabel();
        lengthMLabel = new javax.swing.JLabel();
        diamInLabel = new javax.swing.JLabel();
        plasticGrade = new javax.swing.JComboBox();
        plasticGradeLabel = new javax.swing.JLabel();
        colours = new javax.swing.JComboBox();
        coloursLabel = new javax.swing.JLabel();
        outerReinforcementLabel = new javax.swing.JLabel();
        innerInsulationLabel = new javax.swing.JLabel();
        chemResistLabel = new javax.swing.JLabel();
        outerYes = new javax.swing.JRadioButton();
        outerNo = new javax.swing.JRadioButton();
        innerYes = new javax.swing.JRadioButton();
        innerNo = new javax.swing.JRadioButton();
        chemYes = new javax.swing.JRadioButton();
        chemNo = new javax.swing.JRadioButton();
        upTo6mLabel = new javax.swing.JLabel();
        currLabel = new javax.swing.JLabel();
        addToOrder = new javax.swing.JButton();
        clearFields = new javax.swing.JButton();
        totalCost = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        exitButton = new javax.swing.JButton();
        calcCost = new javax.swing.JButton();
        currentOrder = new javax.swing.JTextField();
        calcCostText = new javax.swing.JTextField();
        confirmOrderBox = new javax.swing.JTextField();
        clearTotal = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "PipesR'us Order Form", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 3, 18))); // NOI18N

        lenField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lenFieldActionPerformed(evt);
            }
        });

        lengthLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lengthLabel.setText("Length");

        diamLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        diamLabel.setText("Outer Diameter");

        lengthMLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        lengthMLabel.setText("m");

        diamInLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        diamInLabel.setText("in");

        plasticGrade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        plasticGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plasticGradeActionPerformed(evt);
            }
        });

        plasticGradeLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        plasticGradeLabel.setText("Plastic Grade");

        colours.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2" }));

        coloursLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        coloursLabel.setText("Colours");

        outerReinforcementLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        outerReinforcementLabel.setText("Outer Reinforcement");

        innerInsulationLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        innerInsulationLabel.setText("Inner Insulation");

        chemResistLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        chemResistLabel.setText("Chemical Resistance");

        outerGroup.add(outerYes);
        outerYes.setText("Yes");
        outerYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outerYesActionPerformed(evt);
            }
        });

        outerGroup.add(outerNo);
        outerNo.setText("No");

        innerGroup.add(innerYes);
        innerYes.setText("Yes");
        innerYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                innerYesActionPerformed(evt);
            }
        });

        innerGroup.add(innerNo);
        innerNo.setText("No");

        chemGroup.add(chemYes);
        chemYes.setText("Yes");
        chemYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chemYesActionPerformed(evt);
            }
        });

        chemGroup.add(chemNo);
        chemNo.setText("No");

        upTo6mLabel.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        upTo6mLabel.setText("(Up to 6m)");

        currLabel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        currLabel.setText("Current Order");

        addToOrder.setText("Add To Order");
        addToOrder.setEnabled(false);
        addToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToOrderActionPerformed(evt);
            }
        });

        clearFields.setText("Reset Fields");
        clearFields.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFieldsActionPerformed(evt);
            }
        });

        totalCost.setText("Confirm Order");
        totalCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalCostActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        calcCost.setText("Calculate Cost");
        calcCost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcCostActionPerformed(evt);
            }
        });

        currentOrder.setEditable(false);
        currentOrder.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        calcCostText.setEditable(false);
        calcCostText.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        calcCostText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcCostTextActionPerformed(evt);
            }
        });

        confirmOrderBox.setEditable(false);
        confirmOrderBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        clearTotal.setText("Clear ");
        clearTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearTotalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lengthLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lenField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lengthMLabel))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(diamField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(diamInLabel)))
                                .addGap(63, 63, 63)
                                .addComponent(upTo6mLabel)
                                .addGap(27, 27, 27))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(calcCost)
                                    .addComponent(chemResistLabel)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(plasticGradeLabel)
                                            .addComponent(diamLabel)
                                            .addComponent(coloursLabel)
                                            .addComponent(outerReinforcementLabel)
                                            .addComponent(innerInsulationLabel))
                                        .addGap(27, 27, 27)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(chemYes)
                                                .addGap(18, 18, 18)
                                                .addComponent(chemNo))
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(innerYes)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(innerNo))
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addComponent(outerYes)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(outerNo)))
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(14, 14, 14)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(colours, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(plasticGrade, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(128, 128, 128)
                                        .addComponent(clearFields)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(calcCostText, javax.swing.GroupLayout.PREFERRED_SIZE, 378, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(143, 143, 143)
                                .addComponent(addToOrder)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 309, Short.MAX_VALUE)
                        .addComponent(exitButton)
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(58, 58, 58)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(currentOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(45, 45, 45)
                                        .addComponent(confirmOrderBox, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(58, 58, 58)
                                        .addComponent(currLabel))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(totalCost)
                                .addGap(51, 51, 51)
                                .addComponent(clearTotal)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lengthLabel)
                            .addComponent(lenField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lengthMLabel)
                            .addComponent(upTo6mLabel))
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(diamLabel)
                            .addComponent(diamField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diamInLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(plasticGradeLabel)
                            .addComponent(plasticGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(coloursLabel)
                            .addComponent(colours, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(innerInsulationLabel)
                            .addComponent(innerYes)
                            .addComponent(innerNo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(outerYes)
                                .addComponent(outerNo))
                            .addComponent(outerReinforcementLabel))
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chemYes)
                            .addComponent(chemNo)
                            .addComponent(chemResistLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(clearFields)
                            .addComponent(calcCost))
                        .addGap(18, 18, 18)
                        .addComponent(calcCostText, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addToOrder))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 76, Short.MAX_VALUE)
                        .addComponent(currLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(totalCost)
                            .addComponent(clearTotal))
                        .addGap(18, 18, 18)
                        .addComponent(confirmOrderBox, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(82, 82, 82)
                        .addComponent(exitButton)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outerYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outerYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outerYesActionPerformed

    private void innerYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_innerYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_innerYesActionPerformed

    private void chemYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chemYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chemYesActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void clearFieldsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFieldsActionPerformed
        lenField.setText("");
        diamField.setText("");        
        plasticGrade.setSelectedIndex(0);
        colours.setSelectedIndex(0);
        outerGroup.clearSelection();
        innerGroup.clearSelection();
        chemGroup.clearSelection();
        calcCostText.setText("");
    }//GEN-LAST:event_clearFieldsActionPerformed

    private void addToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToOrderActionPerformed

        String orderText = currentOrder.getText();          //convert current total to double in order to add new cost to total
        confirmOrderBox.setText("");
        if (orderText.isEmpty()) {
            String newOrderText = String.valueOf(finalCost);
            currentOrder.setText(newOrderText); 
            calcCostText.setText("Order added!");
            addToOrder.setEnabled(false); //disable until next order is validated
            return;
        }
        
        double orderAmount = Double.parseDouble(orderText);
        
        double newOrderAmount = orderAmount+finalCost; //+current userPipe cost (add to total)
        String newOrderText = String.valueOf(newOrderAmount);
        currentOrder.setText(newOrderText); 
        
        //Order amount = cost of current order, add to total after calculating
        calcCostText.setText("Order added!");
        addToOrder.setEnabled(false); //disable until next order is validated
    }//GEN-LAST:event_addToOrderActionPerformed
            double finalCost = -1;
    private void calcCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcCostActionPerformed
      
        boolean outerBool = false,
                innerBool = false,
                chemBool = false,
                outerCheck = false,
                innerCheck = false,
                chemCheck = false;
   
        
        String sLength = lenField.getText();        //retrieve information from user input
        if (sLength.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error - Length field left blank");
            return;
        }
        double length = -1;
        try {
            length = Double.parseDouble(sLength);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error - Length must be a number");
            return;
        }
        
        if (length > 6) {
            JOptionPane.showMessageDialog(null, "Error - Length must be less than 6 (meters)");
            return;
        }
        
        if (length == 0) {
            JOptionPane.showMessageDialog(null, "Error - Length cannot be 0");
            return;
        }
        
        String sDiam = diamField.getText();
        if (sDiam.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Error - Diameter field left blank");
            return;
        }
        double diam = -1;
        try {
            diam = Double.parseDouble(sDiam);            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error - Diameter must be a number");
            return;
        }
        
        if (diam == 0) {
            JOptionPane.showMessageDialog(null, "Error - Diameter cannot be 0");
            return;
        }
        
        String grade = (String)plasticGrade.getSelectedItem();
        String colour = (String)colours.getSelectedItem();             
        
        if (innerYes.isSelected()) { 
            innerCheck = true;
            innerBool = true;
        }
        if (innerNo.isSelected()) {
            innerCheck = true;
            innerBool = false;
        }
        else if (innerCheck == false) {
            JOptionPane.showMessageDialog(null, "Error - Inner Insulation field left blank.");
            return;
        }
        if (outerYes.isSelected()) {
            outerCheck = true;
            outerBool = true;
        }
        if (outerNo.isSelected()) {
            outerCheck = true;
            outerBool = false;
        }
        else if (outerCheck == false) {
            JOptionPane.showMessageDialog(null, "Error - Outer Reinforcement field left blank.");
            return;
        }        
        if (chemYes.isSelected()) {
            chemCheck = true;
            chemBool = true;
        }
        if (chemNo.isSelected()) {
            chemCheck = true;
            chemBool = false;
        }
        else if (chemCheck == false) {
            JOptionPane.showMessageDialog(null, "Error - Chemical Resistance field left blank.");
            return;
        }
        
               
        //General Error Checking
        
        if ("1".contains(grade) && "12".contains(colour)) {
            JOptionPane.showMessageDialog(null, "Error - Grade 1 only available with 0 colours");
            return;
        }
        
        if ("1".contains(grade) && (outerBool==true || innerBool==true)) {
            JOptionPane.showMessageDialog(null, "Error - Grade 1 cannot have Inner Insulation or Outer Reinforcement");
            return;
        }
        
        if ("2".contains(grade) && outerBool==true) {
            JOptionPane.showMessageDialog(null, "Error - Grade 2 cannot have Outer Reinforcement");
            return;
        }
        
        if ("2".contains(grade) && "1".contains(colour) &&innerBool==true) {
            JOptionPane.showMessageDialog(null, "Error - Grade 2 can only have Inner Insulation with 2 colours");
            return;
        }
        
        if ("3".contains(grade) && "01".contains(colour) && outerBool==true) {
            JOptionPane.showMessageDialog(null, "Error - Grade 3 can only have Outer Reinforcement with 2 colours");
            return;
        }
        
        if ("45".contains(grade) && "0".contains(colour)) {
            JOptionPane.showMessageDialog(null, "Error - Grades 4 and 5 cannot have 0 colours");
            return;
        }
        
        if ("5".contains(grade) && "01".contains(colour)) {
            JOptionPane.showMessageDialog(null, "Error - Grade 5 only available with 2 colours");
            return;
        }
        
        if ("01".contains(colour) && innerBool==true) {
            JOptionPane.showMessageDialog(null, "Error - Inner Insulation only available with 2 colours");
            return;
        }
        
        if ("01".contains(colour) && outerBool==true) {
            JOptionPane.showMessageDialog(null, "Error - Outer Reinforcement only available with 2 colours");
            return;
        }
        
        if (innerBool==false && outerBool==true) {
            JOptionPane.showMessageDialog(null, "Error - Outer Reinforcement only available with Inner Insulation");
            return;
        }
        
        //Type Checking
        
        
            if ("123".contains(grade) && "0".contains(colour) && outerBool==false && innerBool==false) {
               Type1 userPipe = new Type1(length, diam, grade, chemBool);     

               finalCost = userPipe.cost();
               calcCostText.setText("Type 1 - "+finalCost);
               addToOrder.setEnabled(true); 
            }
            
            if ("234".contains(grade) && "1".contains(colour) && outerBool==false && innerBool==false){
               Type2 userPipe = new Type2(length, diam, grade, chemBool);
               finalCost = userPipe.cost();
               calcCostText.setText("Type 2 - "+finalCost);
               addToOrder.setEnabled(true);
            }
            
            if ("2345".contains(grade) && "2".contains(colour) && outerBool==false && innerBool==false){
               Type3 userPipe = new Type3(length, diam, grade, chemBool);
               finalCost = userPipe.cost();
               calcCostText.setText("Type 3 - "+finalCost);
               addToOrder.setEnabled(true);
            }
            
            if ("2345".contains(grade) && "2".contains(colour) && outerBool==false && innerBool==true){
               Type4 userPipe = new Type4(length, diam, grade, chemBool);
               finalCost = userPipe.cost();
               calcCostText.setText("Type 4 - "+finalCost);
               addToOrder.setEnabled(true);
            }
        
            if ("345".contains(grade) && "2".contains(colour) && innerBool==true && outerBool==true){
               Type5 userPipe = new Type5(length, diam, grade, chemBool);
               finalCost = userPipe.cost();
               calcCostText.setText("Type 5 - "+finalCost);
               addToOrder.setEnabled(true);
            }
            
            if (finalCost==-1){
            JOptionPane.showMessageDialog(null, "Unknown Error"); //Generic catch-all error if critical failure
            }
              
    }//GEN-LAST:event_calcCostActionPerformed

    private void calcCostTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcCostTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_calcCostTextActionPerformed

    private void lenFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lenFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lenFieldActionPerformed

    private void plasticGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plasticGradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_plasticGradeActionPerformed

    private void totalCostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalCostActionPerformed
         String orderCheck = currentOrder.getText();
         if (orderCheck.isEmpty()) {                         //check to see if items are in the order
            confirmOrderBox.setText("No items in basket");
         } else {
             confirmOrderBox.setText("Order placed.");      //theoretically.
         }
    }//GEN-LAST:event_totalCostActionPerformed

    private void clearTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearTotalActionPerformed
        currentOrder.setText(""); 
        calcCostText.setText("");
        confirmOrderBox.setText("Order Cleared.");
    }//GEN-LAST:event_clearTotalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PipesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PipesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PipesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PipesUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PipesUI().setVisible(true);
                
        

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToOrder;
    private javax.swing.JButton calcCost;
    private javax.swing.JTextField calcCostText;
    private javax.swing.ButtonGroup chemGroup;
    private javax.swing.JRadioButton chemNo;
    private javax.swing.JLabel chemResistLabel;
    private javax.swing.JRadioButton chemYes;
    private javax.swing.JButton clearFields;
    private javax.swing.JButton clearTotal;
    private javax.swing.JComboBox colours;
    private javax.swing.JLabel coloursLabel;
    private javax.swing.JTextField confirmOrderBox;
    private javax.swing.JLabel currLabel;
    private javax.swing.JTextField currentOrder;
    private javax.swing.JTextField diamField;
    private javax.swing.JLabel diamInLabel;
    private javax.swing.JLabel diamLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.ButtonGroup innerGroup;
    private javax.swing.JLabel innerInsulationLabel;
    private javax.swing.JRadioButton innerNo;
    private javax.swing.JRadioButton innerYes;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField lenField;
    private javax.swing.JLabel lengthLabel;
    private javax.swing.JLabel lengthMLabel;
    private javax.swing.ButtonGroup outerGroup;
    private javax.swing.JRadioButton outerNo;
    private javax.swing.JLabel outerReinforcementLabel;
    private javax.swing.JRadioButton outerYes;
    private javax.swing.JComboBox plasticGrade;
    private javax.swing.JLabel plasticGradeLabel;
    private javax.swing.JButton totalCost;
    private javax.swing.JLabel upTo6mLabel;
    // End of variables declaration//GEN-END:variables
}
